
# these commands only apply  using minikube and locall machine.

minikube start --vm-driver=virtualbox
minikube dashboard
minikube stop
minikube delete #if thinks are messed up.

set JAVA_HOME=C:\Program Files\Java\jdk1.8.0_201
set M2_HOME=C:\work\apache-maven-3.6.3
set MAVEN_HOME=C:\work\apache-maven-3.6.3
set PATH=%PATH%;%M2_HOME%\bin
cd C:/dennis/work/Cloud/applications/spring-boot-example
mvn -DskipTests package
cd C:/dennis/work/Cloud/applications/spring-boot-example2
mvn -DskipTests package

docker login --username=dockeridiotfool 


cd C:/dennis/work/Cloud/applications/spring-boot-example
mvn -DskipTests package
cd C:/dennis/work/Cloud/applications/spring-boot-example2
mvn -DskipTests package

# works, this creates an image inside the 'default' virtual box
# this is to be done in docker terminal ( notice the forward slashes in the directory)
cd C:/dennis/work/Cloud/applications/spring-boot-example
docker build -t dockeridiotfool/spring-boot-dennis .
cd C:/dennis/work/Cloud/applications/spring-boot-example2
docker build -t dockeridiotfool/spring-boot-dennis2 .
docker push dockeridiotfool/spring-boot-dennis
docker push dockeridiotfool/spring-boot-dennis2

/* previously I used to use:
docker build -t spring-boot-dennis2 <---Note the difference here
docker tag 7c66c0f20bfb dockeridiotfool/spring-boot-dennis2
docker push dockeridiotfool/spring-boot-dennis
But this is no longer needed
*/

#remove docker image, use first 3 chars of image tag , - f stands for force remove.
docker rmi <first3charOfImage> -f
docker image rm <first3charOfImage> # this has the same effect as the previous line.

cd C:\dennis\work\Cloud\LocalMachineMiniKube

kubectl create namespace servicens
kubectl create namespace clientns

kubectl delete -f loadbalancerLocal.yaml
kubectl delete -f loadbalancerLocal2.yaml
kubectl delete service dennisexposedservice
kubectl delete service dennisexposedservice2
kubectl create -f loadbalancerLocal.yaml
kubectl create -f loadbalancerLocal2.yaml
kubectl get services
#Note that the above command will show EXTERNAL-IP   as pending if minikube is used.

#On cloud providers that support load balancers, an external IP address would be provisioned to access the Service. On Minikube, the LoadBalancer type makes the Service accessible through the minikube service command.
#Run the following command ( this command does not show the desired result)
#minikube service dennisservice

#As a work around try this:  there are bugs: Just edit the config dennisdeployment in the minikube dashboard _after_ exposing the deployment and save
#kubectl config set-context --current --namespace=clientns
kubectl expose deployment dennisdeployment --type=LoadBalancer --port=8084 --target-port 8080 --name=dennisexposedservice
kubectl expose deployment dennisdeployment --type=LoadBalancer --port=8094 --target-port 8090 --name=dennisexposedservice2

#Important: unless dennisexposedservice2 is exposed it will not be accesible by dennisservice
# notice now there is new service created by name dennisexposedservice
minikube service dennisexposedservice

#Getting a shell to a Container use kubectl get pods to get name of pod. kubectl get  pods --all-namespaces -o wide
kubectl exec -it <podname> -- sh
kubectl exec -it <podname> -- /bin/sh
kubectl --namespace=kube-system exec -ti kube-dns-v9-aqlws -c skydns --nslookup kubers.default.svc.cluster.local localhost

Once inside the shell, the following commands will cwork
printenv commmand _inside_ the container will list all environment variables
wget -O - http://dennisexposedservice:8084/
